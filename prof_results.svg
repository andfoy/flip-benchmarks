<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1194" onload="init(evt)" viewBox="0 0 1200 1194" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1194" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1183.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (benchmarks.py:106) (9,198 samples, 29.00%)</title><rect x="0.0946%" y="68" width="28.9956%" height="15" fill="rgb(227,0,7)"/><text x="0.3446%" y="78.50">&lt;module&gt; (benchmarks.py:106)</text></g><g><title>rand (numpy/random/mtrand.cpython-39-x86_64-linux-gnu.so) (9,139 samples, 28.81%)</title><rect x="0.2806%" y="84" width="28.8097%" height="15" fill="rgb(217,0,24)"/><text x="0.5306%" y="94.50">rand (numpy/random/mtrand.cpython-39-x86_64-li..</text></g><g><title>random_sample (numpy/random/mtrand.cpython-39-x86_64-linux-gnu.so) (9,138 samples, 28.81%)</title><rect x="0.2837%" y="100" width="28.8065%" height="15" fill="rgb(221,193,54)"/><text x="0.5337%" y="110.50">random_sample (numpy/random/mtrand.cpython-39-..</text></g><g><title>_common_double_fill (numpy/random/_common.cpython-39-x86_64-linux-gnu.so) (9,138 samples, 28.81%)</title><rect x="0.2837%" y="116" width="28.8065%" height="15" fill="rgb(248,212,6)"/><text x="0.5337%" y="126.50">_common_double_fill (numpy/random/_common.cpyt..</text></g><g><title>random_standard_uniform_fill (numpy/random/mtrand.cpython-39-x86_64-linux-gnu.so) (9,136 samples, 28.80%)</title><rect x="0.2900%" y="132" width="28.8002%" height="15" fill="rgb(208,68,35)"/><text x="0.5400%" y="142.50">random_standard_uniform_fill (numpy/random/mtr..</text></g><g><title>_mt19937_mt19937_double (numpy/random/_mt19937.cpython-39-x86_64-linux-gnu.so) (5,529 samples, 17.43%)</title><rect x="11.6607%" y="148" width="17.4295%" height="15" fill="rgb(232,128,0)"/><text x="11.9107%" y="158.50">_mt19937_mt19937_double (nu..</text></g><g><title>mt19937_gen (numpy/random/_mt19937.cpython-39-x86_64-linux-gnu.so) (542 samples, 1.71%)</title><rect x="27.3816%" y="164" width="1.7086%" height="15" fill="rgb(207,160,47)"/><text x="27.6316%" y="174.50"></text></g><g><title>PyArray_AssignArray (numpy/core/_multiarray_umath.cpython-39-x86_64-linux-gnu.so) (1,409 samples, 4.44%)</title><rect x="29.1060%" y="116" width="4.4417%" height="15" fill="rgb(228,23,34)"/><text x="29.3560%" y="126.50">PyArr..</text></g><g><title>raw_array_assign_array (numpy/core/_multiarray_umath.cpython-39-x86_64-linux-gnu.so) (1,409 samples, 4.44%)</title><rect x="29.1060%" y="132" width="4.4417%" height="15" fill="rgb(218,30,26)"/><text x="29.3560%" y="142.50">raw_a..</text></g><g><title>_aligned_contig_cast_double_to_ubyte (numpy/core/_multiarray_umath.cpython-39-x86_64-linux-gnu.so) (1,409 samples, 4.44%)</title><rect x="29.1060%" y="148" width="4.4417%" height="15" fill="rgb(220,122,19)"/><text x="29.3560%" y="158.50">_alig..</text></g><g><title>array_astype (numpy/core/_multiarray_umath.cpython-39-x86_64-linux-gnu.so) (1,410 samples, 4.44%)</title><rect x="29.1060%" y="100" width="4.4449%" height="15" fill="rgb(250,228,42)"/><text x="29.3560%" y="110.50">array..</text></g><g><title>execute_legacy_ufunc_loop (numpy/core/_multiarray_umath.cpython-39-x86_64-linux-gnu.so) (4,227 samples, 13.33%)</title><rect x="33.7778%" y="148" width="13.3251%" height="15" fill="rgb(240,193,28)"/><text x="34.0278%" y="158.50">execute_legacy_ufunc..</text></g><g><title>trivial_three_operand_loop (numpy/core/_multiarray_umath.cpython-39-x86_64-linux-gnu.so) (4,227 samples, 13.33%)</title><rect x="33.7778%" y="164" width="13.3251%" height="15" fill="rgb(216,20,37)"/><text x="34.0278%" y="174.50">trivial_three_operan..</text></g><g><title>sse2_binary_scalar2_multiply_DOUBLE (numpy/core/_multiarray_umath.cpython-39-x86_64-linux-gnu.so) (4,227 samples, 13.33%)</title><rect x="33.7778%" y="180" width="13.3251%" height="15" fill="rgb(206,188,39)"/><text x="34.0278%" y="190.50">sse2_binary_scalar2_..</text></g><g><title>PyUFunc_GenericFunction_int (numpy/core/_multiarray_umath.cpython-39-x86_64-linux-gnu.so) (4,230 samples, 13.33%)</title><rect x="33.7715%" y="132" width="13.3346%" height="15" fill="rgb(217,207,13)"/><text x="34.0215%" y="142.50">PyUFunc_GenericFunct..</text></g><g><title>&lt;lambda&gt; (benchmarks.py:93) (5,715 samples, 18.02%)</title><rect x="29.0934%" y="84" width="18.0159%" height="15" fill="rgb(231,73,38)"/><text x="29.3434%" y="94.50">&lt;lambda&gt; (benchmarks.py:93)</text></g><g><title>array_multiply (numpy/core/_multiarray_umath.cpython-39-x86_64-linux-gnu.so) (4,231 samples, 13.34%)</title><rect x="33.7715%" y="100" width="13.3377%" height="15" fill="rgb(225,20,46)"/><text x="34.0215%" y="110.50">array_multiply (nump..</text></g><g><title>ufunc_generic_call (numpy/core/_multiarray_umath.cpython-39-x86_64-linux-gnu.so) (4,231 samples, 13.34%)</title><rect x="33.7715%" y="116" width="13.3377%" height="15" fill="rgb(210,31,41)"/><text x="34.0215%" y="126.50">ufunc_generic_call (..</text></g><g><title>&lt;module&gt; (benchmarks.py:108) (5,717 samples, 18.02%)</title><rect x="29.0902%" y="68" width="18.0222%" height="15" fill="rgb(221,200,47)"/><text x="29.3402%" y="78.50">&lt;module&gt; (benchmarks.py:108)</text></g><g><title>__kmp_hardware_timestamp (libomp.so) (415 samples, 1.31%)</title><rect x="47.6010%" y="836" width="1.3082%" height="15" fill="rgb(226,26,5)"/><text x="47.8510%" y="846.50"></text></g><g><title>__kmp_join_call (libomp.so) (716 samples, 2.26%)</title><rect x="47.2480%" y="772" width="2.2571%" height="15" fill="rgb(249,33,26)"/><text x="47.4980%" y="782.50">_..</text></g><g><title>__kmp_internal_join (libomp.so) (716 samples, 2.26%)</title><rect x="47.2480%" y="788" width="2.2571%" height="15" fill="rgb(235,183,28)"/><text x="47.4980%" y="798.50">_..</text></g><g><title>__kmp_join_barrier (libomp.so) (716 samples, 2.26%)</title><rect x="47.2480%" y="804" width="2.2571%" height="15" fill="rgb(221,5,38)"/><text x="47.4980%" y="814.50">_..</text></g><g><title>__kmp_hyper_barrier_gather (libomp.so) (716 samples, 2.26%)</title><rect x="47.2480%" y="820" width="2.2571%" height="15" fill="rgb(247,18,42)"/><text x="47.4980%" y="830.50">_..</text></g><g><title>std::get&lt;(unsigned long)0, double&gt; (tuple:1335) (427 samples, 1.35%)</title><rect x="52.3801%" y="1124" width="1.3461%" height="15" fill="rgb(241,131,45)"/><text x="52.6301%" y="1134.50"></text></g><g><title>std::get&lt;(unsigned long)0, double&gt; (tuple:1321) (363 samples, 1.14%)</title><rect x="52.5818%" y="1140" width="1.1443%" height="15" fill="rgb(249,31,29)"/><text x="52.8318%" y="1150.50"></text></g><g><title>apply_impl&lt;at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt;, std::tuple&lt;double&gt;, 0&gt; (C++17.h:128) (872 samples, 2.75%)</title><rect x="51.3208%" y="1108" width="2.7489%" height="15" fill="rgb(225,111,53)"/><text x="51.5708%" y="1118.50">ap..</text></g><g><title>apply&lt;at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt;, std::tuple&lt;double&gt; &gt; (C++17.h:137) (1,042 samples, 3.28%)</title><rect x="51.2074%" y="1092" width="3.2848%" height="15" fill="rgb(238,160,17)"/><text x="51.4574%" y="1102.50">app..</text></g><g><title>std::_Tuple_impl&lt;(unsigned long)0, double&gt;::_Tuple_impl&lt;double&amp;&gt; (tuple:349) (456 samples, 1.44%)</title><rect x="56.4908%" y="1156" width="1.4375%" height="15" fill="rgb(214,148,48)"/><text x="56.7408%" y="1166.50"></text></g><g><title>dereference&lt;function_traits&lt;at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt; &gt; &gt; (Loops.h:60) (1,143 samples, 3.60%)</title><rect x="54.6498%" y="1092" width="3.6032%" height="15" fill="rgb(232,36,49)"/><text x="54.8998%" y="1102.50">dere..</text></g><g><title>dereference_impl&lt;function_traits&lt;at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt; &gt;, 0&gt; (Loops.h:53) (967 samples, 3.05%)</title><rect x="55.2046%" y="1108" width="3.0484%" height="15" fill="rgb(209,103,24)"/><text x="55.4546%" y="1118.50">der..</text></g><g><title>std::make_tuple&lt;double&amp;&gt; (tuple:1475) (722 samples, 2.28%)</title><rect x="55.9769%" y="1124" width="2.2760%" height="15" fill="rgb(229,88,8)"/><text x="56.2269%" y="1134.50">s..</text></g><g><title>std::tuple&lt;double&gt;::tuple&lt;double&amp;, true&gt; (tuple:627) (672 samples, 2.12%)</title><rect x="56.1345%" y="1140" width="2.1184%" height="15" fill="rgb(213,181,19)"/><text x="56.3845%" y="1150.50">s..</text></g><g><title> vec_func_t = at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(at::vec256::(anonymous namespace)::Vec256&lt;double&gt;)&gt;]::&lt;lambda(char**, const int64_t*, int64_t)&gt; &gt; (FunctionRef.h:43) (2,834 samples, 8.93%)</title><rect x="49.5051%" y="916" width="8.9339%" height="15" fill="rgb(254,191,54)"/><text x="49.7551%" y="926.50"> vec_func_t =..</text></g><g><title>operator() (Loops.h:221) (2,834 samples, 8.93%)</title><rect x="49.5051%" y="932" width="8.9339%" height="15" fill="rgb(241,83,37)"/><text x="49.7551%" y="942.50">operator() (L..</text></g><g><title>unroll_contiguous_scalar_checks&lt;function_traits&lt;at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt; &gt;, at::native::(anonymous namespace)::cpu_kernel_vec(at::TensorIteratorBase&amp;, func_t&amp;&amp;, vec_func_t&amp;&amp;) [with bool check_dynamic_cast = true (2,834 samples, 8.93%)</title><rect x="49.5051%" y="948" width="8.9339%" height="15" fill="rgb(233,36,39)"/><text x="49.7551%" y="958.50">unroll_contig..</text></g><g><title> func_t = at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt; (2,834 samples, 8.93%)</title><rect x="49.5051%" y="964" width="8.9339%" height="15" fill="rgb(226,3,54)"/><text x="49.7551%" y="974.50"> func_t = at:..</text></g><g><title> vec_func_t = at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(at::vec256::(anonymous namespace)::Vec256&lt;double&gt;)&gt;]::&lt;lambda(char**, const int64_t*, int64_t)&gt;::&lt;lambda(size_t)&gt;, 0&gt; (Loops.h:185) (2,834 samples, 8.93%)</title><rect x="49.5051%" y="980" width="8.9339%" height="15" fill="rgb(245,192,40)"/><text x="49.7551%" y="990.50"> vec_func_t =..</text></g><g><title>unroll_contiguous_scalar_checks&lt;function_traits&lt;at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt; &gt;, at::native::(anonymous namespace)::cpu_kernel_vec(at::TensorIteratorBase&amp;, func_t&amp;&amp;, vec_func_t&amp;&amp;) [with bool check_dynamic_cast = true (2,834 samples, 8.93%)</title><rect x="49.5051%" y="996" width="8.9339%" height="15" fill="rgb(238,167,29)"/><text x="49.7551%" y="1006.50">unroll_contig..</text></g><g><title> func_t = at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt; (2,834 samples, 8.93%)</title><rect x="49.5051%" y="1012" width="8.9339%" height="15" fill="rgb(232,182,51)"/><text x="49.7551%" y="1022.50"> func_t = at:..</text></g><g><title> vec_func_t = at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(at::vec256::(anonymous namespace)::Vec256&lt;double&gt;)&gt;]::&lt;lambda(char**, const int64_t*, int64_t)&gt;::&lt;lambda(size_t)&gt; &gt; (Loops.h:173) (2,834 samples, 8.93%)</title><rect x="49.5051%" y="1028" width="8.9339%" height="15" fill="rgb(231,60,39)"/><text x="49.7551%" y="1038.50"> vec_func_t =..</text></g><g><title>operator() (Loops.h:226) (2,834 samples, 8.93%)</title><rect x="49.5051%" y="1044" width="8.9339%" height="15" fill="rgb(208,69,12)"/><text x="49.7551%" y="1054.50">operator() (L..</text></g><g><title>basic_loop&lt;at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt; &gt; (Loops.h:128) (2,834 samples, 8.93%)</title><rect x="49.5051%" y="1060" width="8.9339%" height="15" fill="rgb(235,93,37)"/><text x="49.7551%" y="1070.50">basic_loop&lt;at..</text></g><g><title>execute_op&lt;at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt; &gt; (Loops.h:92) (2,756 samples, 8.69%)</title><rect x="49.7510%" y="1076" width="8.6880%" height="15" fill="rgb(213,116,39)"/><text x="50.0010%" y="1086.50">execute_op&lt;a..</text></g><g><title>std::get&lt;(unsigned long)0, unsigned char&gt; (tuple:1335) (545 samples, 1.72%)</title><rect x="61.9507%" y="1124" width="1.7181%" height="15" fill="rgb(222,207,29)"/><text x="62.2007%" y="1134.50"></text></g><g><title>std::get&lt;(unsigned long)0, unsigned char&gt; (tuple:1321) (439 samples, 1.38%)</title><rect x="62.2848%" y="1140" width="1.3839%" height="15" fill="rgb(206,96,30)"/><text x="62.5348%" y="1150.50"></text></g><g><title>std::__get_helper&lt;(unsigned long)0, unsigned char, &gt; (tuple:1310) (324 samples, 1.02%)</title><rect x="62.6474%" y="1156" width="1.0214%" height="15" fill="rgb(218,138,4)"/><text x="62.8974%" y="1166.50"></text></g><g><title>apply_impl&lt;at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt;, std::tuple&lt;unsigned char&gt;, 0&gt; (C++17.h:128) (1,124 samples, 3.54%)</title><rect x="60.6109%" y="1108" width="3.5433%" height="15" fill="rgb(250,191,14)"/><text x="60.8609%" y="1118.50">appl..</text></g><g><title>apply&lt;at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt;, std::tuple&lt;unsigned char&gt; &gt; (C++17.h:137) (1,346 samples, 4.24%)</title><rect x="60.4754%" y="1092" width="4.2431%" height="15" fill="rgb(239,60,40)"/><text x="60.7254%" y="1102.50">apply..</text></g><g><title>std::_Tuple_impl&lt;(unsigned long)0, unsigned char&gt;::_Tuple_impl&lt;unsigned char&amp;&gt; (tuple:349) (583 samples, 1.84%)</title><rect x="67.3823%" y="1156" width="1.8378%" height="15" fill="rgb(206,27,48)"/><text x="67.6323%" y="1166.50">s..</text></g><g><title>dereference&lt;function_traits&lt;at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt; &gt; &gt; (Loops.h:60) (1,479 samples, 4.66%)</title><rect x="64.9738%" y="1092" width="4.6624%" height="15" fill="rgb(225,35,8)"/><text x="65.2238%" y="1102.50">deref..</text></g><g><title>dereference_impl&lt;function_traits&lt;at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt; &gt;, 0&gt; (Loops.h:53) (1,230 samples, 3.88%)</title><rect x="65.7588%" y="1108" width="3.8774%" height="15" fill="rgb(250,213,24)"/><text x="66.0088%" y="1118.50">dere..</text></g><g><title>std::make_tuple&lt;unsigned char&amp;&gt; (tuple:1475) (918 samples, 2.89%)</title><rect x="66.7423%" y="1124" width="2.8939%" height="15" fill="rgb(247,123,22)"/><text x="66.9923%" y="1134.50">st..</text></g><g><title>std::tuple&lt;unsigned char&gt;::tuple&lt;unsigned char&amp;, true&gt; (tuple:627) (857 samples, 2.70%)</title><rect x="66.9346%" y="1140" width="2.7016%" height="15" fill="rgb(231,138,38)"/><text x="67.1846%" y="1150.50">st..</text></g><g><title>at::native::copy_ (Copy.cpp:229) (7,226 samples, 22.78%)</title><rect x="47.1376%" y="596" width="22.7791%" height="15" fill="rgb(231,145,46)"/><text x="47.3876%" y="606.50">at::native::copy_ (Copy.cpp:229)</text></g><g><title>copy_impl (Copy.cpp:223) (7,220 samples, 22.76%)</title><rect x="47.1565%" y="612" width="22.7602%" height="15" fill="rgb(251,118,11)"/><text x="47.4065%" y="622.50">copy_impl (Copy.cpp:223)</text></g><g><title>at::native::DispatchStub&lt;void (*)(at::TensorIterator&amp;, bool), at::native::copy_stub&gt;::operator()&lt;at::TensorIterator&amp;, bool&amp;&gt; (DispatchStub.h:82) (7,220 samples, 22.76%)</title><rect x="47.1565%" y="628" width="22.7602%" height="15" fill="rgb(217,147,25)"/><text x="47.4065%" y="638.50">at::native::DispatchStub&lt;void (*)(at..</text></g><g><title>copy_kernel (CopyKernel.cpp.AVX2.cpp:68) (7,220 samples, 22.76%)</title><rect x="47.1565%" y="644" width="22.7602%" height="15" fill="rgb(247,81,37)"/><text x="47.4065%" y="654.50">copy_kernel (CopyKernel.cpp.AVX2.cpp..</text></g><g><title>operator() (CopyKernel.cpp.AVX2.cpp:37) (7,220 samples, 22.76%)</title><rect x="47.1565%" y="660" width="22.7602%" height="15" fill="rgb(209,12,38)"/><text x="47.4065%" y="670.50">operator() (CopyKernel.cpp.AVX2.cpp:..</text></g><g><title>operator() (CopyKernel.cpp.AVX2.cpp:37) (7,220 samples, 22.76%)</title><rect x="47.1565%" y="676" width="22.7602%" height="15" fill="rgb(227,1,9)"/><text x="47.4065%" y="686.50">operator() (CopyKernel.cpp.AVX2.cpp:..</text></g><g><title>cpu_kernel_vec&lt;&gt; (Loops.h:235) (7,220 samples, 22.76%)</title><rect x="47.1565%" y="692" width="22.7602%" height="15" fill="rgb(248,47,43)"/><text x="47.4065%" y="702.50">cpu_kernel_vec&lt;&gt; (Loops.h:235)</text></g><g><title>at::TensorIteratorBase::for_each (TensorIterator.cpp:681) (7,220 samples, 22.76%)</title><rect x="47.1565%" y="708" width="22.7602%" height="15" fill="rgb(221,10,30)"/><text x="47.4065%" y="718.50">at::TensorIteratorBase::for_each (Te..</text></g><g><title>at::TensorIteratorBase::for_each (TensorIterator.cpp:690) (7,194 samples, 22.68%)</title><rect x="47.2385%" y="724" width="22.6783%" height="15" fill="rgb(210,229,1)"/><text x="47.4885%" y="734.50">at::TensorIteratorBase::for_each (Te..</text></g><g><title>parallel_for&lt;at::TensorIteratorBase::for_each(at::TensorIteratorBase::loop2d_t, int64_t)::&lt;lambda(int64_t, int64_t)&gt; &gt; (ParallelOpenMP.h:55) (7,193 samples, 22.68%)</title><rect x="47.2417%" y="740" width="22.6751%" height="15" fill="rgb(222,148,37)"/><text x="47.4917%" y="750.50">parallel_for&lt;at::TensorIteratorBase:..</text></g><g><title>__kmp_api_GOMP_parallel_40_alias (libomp.so) (7,193 samples, 22.68%)</title><rect x="47.2417%" y="756" width="22.6751%" height="15" fill="rgb(234,67,33)"/><text x="47.4917%" y="766.50">__kmp_api_GOMP_parallel_40_alias (li..</text></g><g><title>at::parallel_for&lt;at::TensorIteratorBase::for_each(c10::function_ref&lt;void (char**, long const*, long, long)&gt;, long)::{lambda(long, long)#1}&gt; (ParallelOpenMP.h:47) (6,475 samples, 20.41%)</title><rect x="49.5051%" y="772" width="20.4117%" height="15" fill="rgb(247,98,35)"/><text x="49.7551%" y="782.50">at::parallel_for&lt;at::TensorItera..</text></g><g><title>operator() (TensorIterator.cpp:692) (6,475 samples, 20.41%)</title><rect x="49.5051%" y="788" width="20.4117%" height="15" fill="rgb(247,138,52)"/><text x="49.7551%" y="798.50">operator() (TensorIterator.cpp:6..</text></g><g><title>at::TensorIteratorBase::serial_for_each (TensorIterator.cpp:729) (6,475 samples, 20.41%)</title><rect x="49.5051%" y="804" width="20.4117%" height="15" fill="rgb(213,79,30)"/><text x="49.7551%" y="814.50">at::TensorIteratorBase::serial_f..</text></g><g><title>c10::function_ref&lt;void (char**, long const*, long, long)&gt;::operator() (FunctionRef.h:63) (6,475 samples, 20.41%)</title><rect x="49.5051%" y="820" width="20.4117%" height="15" fill="rgb(246,177,23)"/><text x="49.7551%" y="830.50">c10::function_ref&lt;void (char**, ..</text></g><g><title>callback_fn&lt;at::TensorIteratorBase::for_each(at::TensorIteratorBase::loop_t, int64_t)::&lt;lambda(char**, const int64_t*, int64_t, int64_t)&gt; &gt; (FunctionRef.h:43) (6,475 samples, 20.41%)</title><rect x="49.5051%" y="836" width="20.4117%" height="15" fill="rgb(230,62,27)"/><text x="49.7551%" y="846.50">callback_fn&lt;at::TensorIteratorBa..</text></g><g><title>operator() (TensorIterator.cpp:680) (6,475 samples, 20.41%)</title><rect x="49.5051%" y="852" width="20.4117%" height="15" fill="rgb(216,154,8)"/><text x="49.7551%" y="862.50">operator() (TensorIterator.cpp:6..</text></g><g><title>c10::function_ref&lt;void (char**, long const*, long)&gt;::operator() (FunctionRef.h:63) (6,475 samples, 20.41%)</title><rect x="49.5051%" y="868" width="20.4117%" height="15" fill="rgb(244,35,45)"/><text x="49.7551%" y="878.50">c10::function_ref&lt;void (char**, ..</text></g><g><title>callback_fn&lt;at::native::(anonymous namespace)::cpu_kernel_vec(at::TensorIteratorBase&amp;, func_t&amp;&amp;, vec_func_t&amp;&amp;) [with bool check_dynamic_cast = true (6,475 samples, 20.41%)</title><rect x="49.5051%" y="884" width="20.4117%" height="15" fill="rgb(251,115,12)"/><text x="49.7551%" y="894.50">callback_fn&lt;at::native::(anonymo..</text></g><g><title> func_t = at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt; (6,475 samples, 20.41%)</title><rect x="49.5051%" y="900" width="20.4117%" height="15" fill="rgb(240,54,50)"/><text x="49.7551%" y="910.50"> func_t = at::native::(anonymous..</text></g><g><title> vec_func_t = at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(at::vec256::(anonymous namespace)::Vec256&lt;unsigned char&gt;)&gt;]::&lt;lambda(char**, const int64_t*, int64_t)&gt; &gt; (FunctionRef.h:43) (3,641 samples, 11.48%)</title><rect x="58.4389%" y="916" width="11.4778%" height="15" fill="rgb(233,84,52)"/><text x="58.6889%" y="926.50"> vec_func_t = at:..</text></g><g><title>operator() (Loops.h:221) (3,641 samples, 11.48%)</title><rect x="58.4389%" y="932" width="11.4778%" height="15" fill="rgb(207,117,47)"/><text x="58.6889%" y="942.50">operator() (Loops..</text></g><g><title>unroll_contiguous_scalar_checks&lt;function_traits&lt;at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt; &gt;, at::native::(anonymous namespace)::cpu_kernel_vec(at::TensorIteratorBase&amp;, func_t&amp;&amp;, vec_func_t&amp;&amp;) [with bool check_dynamic_cast = true (3,641 samples, 11.48%)</title><rect x="58.4389%" y="948" width="11.4778%" height="15" fill="rgb(249,43,39)"/><text x="58.6889%" y="958.50">unroll_contiguous..</text></g><g><title> func_t = at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt; (3,641 samples, 11.48%)</title><rect x="58.4389%" y="964" width="11.4778%" height="15" fill="rgb(209,38,44)"/><text x="58.6889%" y="974.50"> func_t = at::nat..</text></g><g><title> vec_func_t = at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(at::vec256::(anonymous namespace)::Vec256&lt;unsigned char&gt;)&gt;]::&lt;lambda(char**, const int64_t*, int64_t)&gt;::&lt;lambda(size_t)&gt;, 0&gt; (Loops.h:185) (3,641 samples, 11.48%)</title><rect x="58.4389%" y="980" width="11.4778%" height="15" fill="rgb(236,212,23)"/><text x="58.6889%" y="990.50"> vec_func_t = at:..</text></g><g><title>unroll_contiguous_scalar_checks&lt;function_traits&lt;at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt; &gt;, at::native::(anonymous namespace)::cpu_kernel_vec(at::TensorIteratorBase&amp;, func_t&amp;&amp;, vec_func_t&amp;&amp;) [with bool check_dynamic_cast = true (3,641 samples, 11.48%)</title><rect x="58.4389%" y="996" width="11.4778%" height="15" fill="rgb(242,79,21)"/><text x="58.6889%" y="1006.50">unroll_contiguous..</text></g><g><title> func_t = at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt; (3,641 samples, 11.48%)</title><rect x="58.4389%" y="1012" width="11.4778%" height="15" fill="rgb(211,96,35)"/><text x="58.6889%" y="1022.50"> func_t = at::nat..</text></g><g><title> vec_func_t = at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(at::vec256::(anonymous namespace)::Vec256&lt;unsigned char&gt;)&gt;]::&lt;lambda(char**, const int64_t*, int64_t)&gt;::&lt;lambda(size_t)&gt; &gt; (Loops.h:173) (3,641 samples, 11.48%)</title><rect x="58.4389%" y="1028" width="11.4778%" height="15" fill="rgb(253,215,40)"/><text x="58.6889%" y="1038.50"> vec_func_t = at:..</text></g><g><title>operator() (Loops.h:226) (3,641 samples, 11.48%)</title><rect x="58.4389%" y="1044" width="11.4778%" height="15" fill="rgb(211,81,21)"/><text x="58.6889%" y="1054.50">operator() (Loops..</text></g><g><title>basic_loop&lt;at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt; &gt; (Loops.h:128) (3,641 samples, 11.48%)</title><rect x="58.4389%" y="1060" width="11.4778%" height="15" fill="rgb(208,190,38)"/><text x="58.6889%" y="1070.50">basic_loop&lt;at::na..</text></g><g><title>execute_op&lt;at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&amp;, bool)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(scalar_t)&gt; &gt; (Loops.h:92) (3,531 samples, 11.13%)</title><rect x="58.7857%" y="1076" width="11.1311%" height="15" fill="rgb(235,213,38)"/><text x="59.0357%" y="1086.50">execute_op&lt;at::n..</text></g><g><title>copy_ (VariableTypeManual.cpp:244) (7,229 samples, 22.79%)</title><rect x="47.1345%" y="436" width="22.7886%" height="15" fill="rgb(237,122,38)"/><text x="47.3845%" y="446.50">copy_ (VariableTypeManual.cpp:244)</text></g><g><title>at::Tensor::copy_ (TensorMethods.cpp:887) (7,229 samples, 22.79%)</title><rect x="47.1345%" y="452" width="22.7886%" height="15" fill="rgb(244,218,35)"/><text x="47.3845%" y="462.50">at::Tensor::copy_ (TensorMethods.cpp..</text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor&amp; (at::Tensor&amp;, at::Tensor const&amp;, bool)&gt;::call (Dispatcher.h:346) (7,229 samples, 22.79%)</title><rect x="47.1345%" y="468" width="22.7886%" height="15" fill="rgb(240,68,47)"/><text x="47.3845%" y="478.50">c10::TypedOperatorHandle&lt;at::Tensor&amp;..</text></g><g><title>c10::Dispatcher::call&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor const&amp;, bool&gt; (Dispatcher.h:417) (7,229 samples, 22.79%)</title><rect x="47.1345%" y="484" width="22.7886%" height="15" fill="rgb(210,16,53)"/><text x="47.3845%" y="494.50">c10::Dispatcher::call&lt;at::Tensor&amp;, a..</text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor const&amp;, bool&gt; (Dispatcher.h:405) (7,229 samples, 22.79%)</title><rect x="47.1345%" y="500" width="22.7886%" height="15" fill="rgb(235,124,12)"/><text x="47.3845%" y="510.50">c10::Dispatcher::callWithDispatchKey..</text></g><g><title>c10::KernelFunction::call&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor const&amp;, bool&gt; (KernelFunction_impl.h:55) (7,229 samples, 22.79%)</title><rect x="47.1345%" y="516" width="22.7886%" height="15" fill="rgb(224,169,11)"/><text x="47.3845%" y="526.50">c10::KernelFunction::call&lt;at::Tensor..</text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor const&amp;, bool&gt; (KernelFunction_impl.h:46) (7,229 samples, 22.79%)</title><rect x="47.1345%" y="532" width="22.7886%" height="15" fill="rgb(250,166,2)"/><text x="47.3845%" y="542.50">c10::callUnboxedKernelFunction&lt;at::T..</text></g><g><title>call (make_boxed_from_unboxed_functor.h:406) (7,228 samples, 22.79%)</title><rect x="47.1376%" y="548" width="22.7854%" height="15" fill="rgb(242,216,29)"/><text x="47.3876%" y="558.50">call (make_boxed_from_unboxed_functo..</text></g><g><title>operator() (WrapFunctionIntoFunctor.h:14) (7,228 samples, 22.79%)</title><rect x="47.1376%" y="564" width="22.7854%" height="15" fill="rgb(230,116,27)"/><text x="47.3876%" y="574.50">operator() (WrapFunctionIntoFunctor...</text></g><g><title>copy_ (RegisterDefaultBackend.cpp:357) (7,228 samples, 22.79%)</title><rect x="47.1376%" y="580" width="22.7854%" height="15" fill="rgb(228,99,48)"/><text x="47.3876%" y="590.50">copy_ (RegisterDefaultBackend.cpp:35..</text></g><g><title>at::Tensor::copy_ (TensorMethods.cpp:887) (7,232 samples, 22.80%)</title><rect x="47.1313%" y="308" width="22.7981%" height="15" fill="rgb(253,11,6)"/><text x="47.3813%" y="318.50">at::Tensor::copy_ (TensorMethods.cpp..</text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor&amp; (at::Tensor&amp;, at::Tensor const&amp;, bool)&gt;::call (Dispatcher.h:346) (7,232 samples, 22.80%)</title><rect x="47.1313%" y="324" width="22.7981%" height="15" fill="rgb(247,143,39)"/><text x="47.3813%" y="334.50">c10::TypedOperatorHandle&lt;at::Tensor&amp;..</text></g><g><title>c10::Dispatcher::call&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor const&amp;, bool&gt; (Dispatcher.h:417) (7,232 samples, 22.80%)</title><rect x="47.1313%" y="340" width="22.7981%" height="15" fill="rgb(236,97,10)"/><text x="47.3813%" y="350.50">c10::Dispatcher::call&lt;at::Tensor&amp;, a..</text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor const&amp;, bool&gt; (Dispatcher.h:405) (7,232 samples, 22.80%)</title><rect x="47.1313%" y="356" width="22.7981%" height="15" fill="rgb(233,208,19)"/><text x="47.3813%" y="366.50">c10::Dispatcher::callWithDispatchKey..</text></g><g><title>c10::KernelFunction::call&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor const&amp;, bool&gt; (KernelFunction_impl.h:55) (7,232 samples, 22.80%)</title><rect x="47.1313%" y="372" width="22.7981%" height="15" fill="rgb(216,164,2)"/><text x="47.3813%" y="382.50">c10::KernelFunction::call&lt;at::Tensor..</text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor const&amp;, bool&gt; (KernelFunction_impl.h:46) (7,232 samples, 22.80%)</title><rect x="47.1313%" y="388" width="22.7981%" height="15" fill="rgb(220,129,5)"/><text x="47.3813%" y="398.50">c10::callUnboxedKernelFunction&lt;at::T..</text></g><g><title>call (make_boxed_from_unboxed_functor.h:406) (7,232 samples, 22.80%)</title><rect x="47.1313%" y="404" width="22.7981%" height="15" fill="rgb(242,17,10)"/><text x="47.3813%" y="414.50">call (make_boxed_from_unboxed_functo..</text></g><g><title>operator() (WrapFunctionIntoFunctor.h:14) (7,231 samples, 22.79%)</title><rect x="47.1345%" y="420" width="22.7949%" height="15" fill="rgb(242,107,0)"/><text x="47.3845%" y="430.50">operator() (WrapFunctionIntoFunctor...</text></g><g><title>at::Tensor::contiguous (TensorBody.h:126) (7,239 samples, 22.82%)</title><rect x="47.1313%" y="132" width="22.8201%" height="15" fill="rgb(251,28,31)"/><text x="47.3813%" y="142.50">at::Tensor::contiguous (TensorBody.h..</text></g><g><title>at::Tensor::__dispatch_contiguous (TensorMethods.cpp:879) (7,239 samples, 22.82%)</title><rect x="47.1313%" y="148" width="22.8201%" height="15" fill="rgb(233,223,10)"/><text x="47.3813%" y="158.50">at::Tensor::__dispatch_contiguous (T..</text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor(at::Tensor const&amp;, c10::MemoryFormat)&gt;::call (Dispatcher.h:346) (7,239 samples, 22.82%)</title><rect x="47.1313%" y="164" width="22.8201%" height="15" fill="rgb(215,21,27)"/><text x="47.3813%" y="174.50">c10::TypedOperatorHandle&lt;at::Tensor(..</text></g><g><title>c10::Dispatcher::call&lt;at::Tensor, at::Tensor const&amp;, c10::MemoryFormat&gt; (Dispatcher.h:417) (7,239 samples, 22.82%)</title><rect x="47.1313%" y="180" width="22.8201%" height="15" fill="rgb(232,23,21)"/><text x="47.3813%" y="190.50">c10::Dispatcher::call&lt;at::Tensor, at..</text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor, at::Tensor const&amp;, c10::MemoryFormat&gt; (Dispatcher.h:405) (7,239 samples, 22.82%)</title><rect x="47.1313%" y="196" width="22.8201%" height="15" fill="rgb(244,5,23)"/><text x="47.3813%" y="206.50">c10::Dispatcher::callWithDispatchKey..</text></g><g><title>c10::KernelFunction::call&lt;at::Tensor, at::Tensor const&amp;, c10::MemoryFormat&gt; (KernelFunction_impl.h:55) (7,239 samples, 22.82%)</title><rect x="47.1313%" y="212" width="22.8201%" height="15" fill="rgb(226,81,46)"/><text x="47.3813%" y="222.50">c10::KernelFunction::call&lt;at::Tensor..</text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor, at::Tensor const&amp;, c10::MemoryFormat&gt; (KernelFunction_impl.h:46) (7,239 samples, 22.82%)</title><rect x="47.1313%" y="228" width="22.8201%" height="15" fill="rgb(247,70,30)"/><text x="47.3813%" y="238.50">c10::callUnboxedKernelFunction&lt;at::T..</text></g><g><title>call (make_boxed_from_unboxed_functor.h:406) (7,239 samples, 22.82%)</title><rect x="47.1313%" y="244" width="22.8201%" height="15" fill="rgb(212,68,19)"/><text x="47.3813%" y="254.50">call (make_boxed_from_unboxed_functo..</text></g><g><title>operator() (WrapFunctionIntoFunctor.h:14) (7,239 samples, 22.82%)</title><rect x="47.1313%" y="260" width="22.8201%" height="15" fill="rgb(240,187,13)"/><text x="47.3813%" y="270.50">operator() (WrapFunctionIntoFunctor...</text></g><g><title>contiguous (RegisterMath.cpp:964) (7,239 samples, 22.82%)</title><rect x="47.1313%" y="276" width="22.8201%" height="15" fill="rgb(223,113,26)"/><text x="47.3813%" y="286.50">contiguous (RegisterMath.cpp:964)</text></g><g><title>at::native::contiguous (TensorProperties.cpp:75) (7,239 samples, 22.82%)</title><rect x="47.1313%" y="292" width="22.8201%" height="15" fill="rgb(206,192,2)"/><text x="47.3813%" y="302.50">at::native::contiguous (TensorProper..</text></g><g><title>THPVariable_contiguous (python_variable_methods.cpp:268) (7,241 samples, 22.83%)</title><rect x="47.1282%" y="100" width="22.8264%" height="15" fill="rgb(241,108,4)"/><text x="47.3782%" y="110.50">THPVariable_contiguous (python_varia..</text></g><g><title>dispatch_contiguous (python_variable_methods.cpp:232) (7,240 samples, 22.82%)</title><rect x="47.1313%" y="116" width="22.8233%" height="15" fill="rgb(247,173,49)"/><text x="47.3813%" y="126.50">dispatch_contiguous (python_variable..</text></g><g><title>&lt;lambda&gt; (benchmarks.py:75) (7,284 samples, 22.96%)</title><rect x="47.1219%" y="84" width="22.9620%" height="15" fill="rgb(224,114,35)"/><text x="47.3719%" y="94.50">&lt;lambda&gt; (benchmarks.py:75)</text></g><g><title>&lt;module&gt; (benchmarks.py:110) (7,381 samples, 23.27%)</title><rect x="47.1156%" y="68" width="23.2678%" height="15" fill="rgb(245,159,27)"/><text x="47.3656%" y="78.50">&lt;module&gt; (benchmarks.py:110)</text></g><g><title>&lt;lambda&gt; (benchmarks.py:97) (991 samples, 3.12%)</title><rect x="71.1147%" y="84" width="3.1240%" height="15" fill="rgb(245,172,44)"/><text x="71.3647%" y="94.50">&lt;la..</text></g><g><title>&lt;module&gt; (benchmarks.py:112) (1,241 samples, 3.91%)</title><rect x="70.3833%" y="68" width="3.9121%" height="15" fill="rgb(236,23,11)"/><text x="70.6333%" y="78.50">&lt;mod..</text></g><g><title>THPUtils_checkLong (python_numbers.h:37) (346 samples, 1.09%)</title><rect x="78.1886%" y="212" width="1.0907%" height="15" fill="rgb(205,117,38)"/><text x="78.4386%" y="222.50"></text></g><g><title>infer_scalar_type (tensor_new.cpp:163) (602 samples, 1.90%)</title><rect x="78.1666%" y="196" width="1.8977%" height="15" fill="rgb(237,72,25)"/><text x="78.4166%" y="206.50">i..</text></g><g><title>infer_scalar_type (tensor_new.cpp:194) (1,420 samples, 4.48%)</title><rect x="75.6478%" y="180" width="4.4764%" height="15" fill="rgb(244,70,9)"/><text x="75.8978%" y="190.50">infer..</text></g><g><title>infer_scalar_type (tensor_new.cpp:196) (934 samples, 2.94%)</title><rect x="80.6443%" y="180" width="2.9443%" height="15" fill="rgb(217,125,39)"/><text x="80.8943%" y="190.50">in..</text></g><g><title>c10::operator==&lt;c10::ScalarType&gt; (Optional.h:912) (431 samples, 1.36%)</title><rect x="83.6959%" y="196" width="1.3587%" height="15" fill="rgb(235,36,10)"/><text x="83.9459%" y="206.50"></text></g><g><title>infer_scalar_type (tensor_new.cpp:197) (731 samples, 2.30%)</title><rect x="83.5887%" y="180" width="2.3044%" height="15" fill="rgb(251,123,47)"/><text x="83.8387%" y="190.50">i..</text></g><g><title>torch::utils::indexing_tensor_from_data (tensor_new.cpp:593) (4,095 samples, 12.91%)</title><rect x="74.5003%" y="164" width="12.9090%" height="15" fill="rgb(221,13,13)"/><text x="74.7503%" y="174.50">torch::utils::index..</text></g><g><title>infer_scalar_type (tensor_new.cpp:199) (481 samples, 1.52%)</title><rect x="85.8931%" y="180" width="1.5163%" height="15" fill="rgb(238,131,9)"/><text x="86.1431%" y="190.50"></text></g><g><title>THPPointer&lt;_object&gt;::~THPPointer (object_ptr.h:12) (459 samples, 1.45%)</title><rect x="85.9624%" y="196" width="1.4469%" height="15" fill="rgb(211,50,8)"/><text x="86.2124%" y="206.50"></text></g><g><title>recursive_store (tensor_new.cpp:211) (381 samples, 1.20%)</title><rect x="88.5001%" y="212" width="1.2011%" height="15" fill="rgb(245,182,24)"/><text x="88.7501%" y="222.50"></text></g><g><title>recursive_store (tensor_new.cpp:226) (704 samples, 2.22%)</title><rect x="87.5323%" y="196" width="2.2193%" height="15" fill="rgb(242,14,37)"/><text x="87.7823%" y="206.50">r..</text></g><g><title>internal_new_from_data (tensor_new.cpp:292) (871 samples, 2.75%)</title><rect x="87.4630%" y="180" width="2.7457%" height="15" fill="rgb(246,228,12)"/><text x="87.7130%" y="190.50">in..</text></g><g><title>torch::autograd::THPVariable_getitem (python_variable_indexing.cpp:315) (5,016 samples, 15.81%)</title><rect x="74.4152%" y="100" width="15.8124%" height="15" fill="rgb(213,55,15)"/><text x="74.6652%" y="110.50">torch::autograd::THPVari..</text></g><g><title>applySlicing (python_variable_indexing.cpp:150) (5,014 samples, 15.81%)</title><rect x="74.4215%" y="116" width="15.8061%" height="15" fill="rgb(209,9,3)"/><text x="74.6715%" y="126.50">applySlicing (python_var..</text></g><g><title>operator() (python_variable_indexing.cpp:184) (4,989 samples, 15.73%)</title><rect x="74.5003%" y="132" width="15.7273%" height="15" fill="rgb(230,59,30)"/><text x="74.7503%" y="142.50">operator() (python_varia..</text></g><g><title>sequenceToVariable (python_variable_indexing.cpp:86) (4,989 samples, 15.73%)</title><rect x="74.5003%" y="148" width="15.7273%" height="15" fill="rgb(209,121,21)"/><text x="74.7503%" y="158.50">sequenceToVariable (pyth..</text></g><g><title>torch::utils::indexing_tensor_from_data (tensor_new.cpp:601) (894 samples, 2.82%)</title><rect x="87.4094%" y="164" width="2.8182%" height="15" fill="rgb(220,109,13)"/><text x="87.6594%" y="174.50">to..</text></g><g><title>cpu_index_kernel&lt;double, at::native::(anonymous namespace)::index_kernel(at::TensorIterator&amp;, c10::IntArrayRef, c10::IntArrayRef)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(char*, char*, int64_t)&gt; &gt; (IndexKernel.cpp.AVX2.cpp:98) (816 samples, 2.57%)</title><rect x="90.3316%" y="532" width="2.5723%" height="15" fill="rgb(232,18,1)"/><text x="90.5816%" y="542.50">cp..</text></g><g><title>at::TensorIteratorBase::for_each (TensorIterator.cpp:681) (816 samples, 2.57%)</title><rect x="90.3316%" y="548" width="2.5723%" height="15" fill="rgb(215,41,42)"/><text x="90.5816%" y="558.50">at..</text></g><g><title>at::TensorIteratorBase::for_each (TensorIterator.cpp:690) (809 samples, 2.55%)</title><rect x="90.3537%" y="564" width="2.5503%" height="15" fill="rgb(224,123,36)"/><text x="90.6037%" y="574.50">at..</text></g><g><title>parallel_for&lt;at::TensorIteratorBase::for_each(at::TensorIteratorBase::loop2d_t, int64_t)::&lt;lambda(int64_t, int64_t)&gt; &gt; (ParallelOpenMP.h:55) (809 samples, 2.55%)</title><rect x="90.3537%" y="580" width="2.5503%" height="15" fill="rgb(240,125,3)"/><text x="90.6037%" y="590.50">pa..</text></g><g><title>__kmp_api_GOMP_parallel_40_alias (libomp.so) (809 samples, 2.55%)</title><rect x="90.3537%" y="596" width="2.5503%" height="15" fill="rgb(205,98,50)"/><text x="90.6037%" y="606.50">__..</text></g><g><title>at::parallel_for&lt;at::TensorIteratorBase::for_each(c10::function_ref&lt;void (char**, long const*, long, long)&gt;, long)::{lambda(long, long)#1}&gt; (ParallelOpenMP.h:47) (632 samples, 1.99%)</title><rect x="90.9117%" y="612" width="1.9923%" height="15" fill="rgb(205,185,37)"/><text x="91.1617%" y="622.50">a..</text></g><g><title>operator() (TensorIterator.cpp:692) (632 samples, 1.99%)</title><rect x="90.9117%" y="628" width="1.9923%" height="15" fill="rgb(238,207,15)"/><text x="91.1617%" y="638.50">o..</text></g><g><title>at::TensorIteratorBase::serial_for_each (TensorIterator.cpp:729) (631 samples, 1.99%)</title><rect x="90.9148%" y="644" width="1.9892%" height="15" fill="rgb(213,199,42)"/><text x="91.1648%" y="654.50">a..</text></g><g><title>c10::function_ref&lt;void (char**, long const*, long, long)&gt;::operator() (FunctionRef.h:63) (631 samples, 1.99%)</title><rect x="90.9148%" y="660" width="1.9892%" height="15" fill="rgb(235,201,11)"/><text x="91.1648%" y="670.50">c..</text></g><g><title>callback_fn&lt;at::TensorIteratorBase::for_each(at::TensorIteratorBase::loop_t, int64_t)::&lt;lambda(char**, const int64_t*, int64_t, int64_t)&gt; &gt; (FunctionRef.h:43) (631 samples, 1.99%)</title><rect x="90.9148%" y="676" width="1.9892%" height="15" fill="rgb(207,46,11)"/><text x="91.1648%" y="686.50">c..</text></g><g><title>operator() (TensorIterator.cpp:680) (631 samples, 1.99%)</title><rect x="90.9148%" y="692" width="1.9892%" height="15" fill="rgb(241,35,35)"/><text x="91.1648%" y="702.50">o..</text></g><g><title>c10::function_ref&lt;void (char**, long const*, long)&gt;::operator() (FunctionRef.h:63) (631 samples, 1.99%)</title><rect x="90.9148%" y="708" width="1.9892%" height="15" fill="rgb(243,32,47)"/><text x="91.1648%" y="718.50">c..</text></g><g><title>callback_fn&lt;at::native::(anonymous namespace)::cpu_index_kernel(at::TensorIterator&amp;, c10::IntArrayRef, c10::IntArrayRef, const func_t&amp;, bool) [with scalar_t = double (631 samples, 1.99%)</title><rect x="90.9148%" y="724" width="1.9892%" height="15" fill="rgb(247,202,23)"/><text x="91.1648%" y="734.50">c..</text></g><g><title> func_t = at::native::(anonymous namespace)::index_kernel(at::TensorIterator&amp;, c10::IntArrayRef, c10::IntArrayRef)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(char*, char*, int64_t)&gt;]::&lt;lambda(char**, const int64_t*, int64_t)&gt; &gt; (FunctionRef.h:43) (631 samples, 1.99%)</title><rect x="90.9148%" y="740" width="1.9892%" height="15" fill="rgb(219,102,11)"/><text x="91.1648%" y="750.50"> ..</text></g><g><title>operator() (IndexKernel.cpp.AVX2.cpp:88) (353 samples, 1.11%)</title><rect x="94.0451%" y="756" width="1.1128%" height="15" fill="rgb(243,110,44)"/><text x="94.2951%" y="766.50"></text></g><g><title>index_kernel (IndexKernel.cpp.AVX2.cpp:107) (1,613 samples, 5.08%)</title><rect x="90.3316%" y="484" width="5.0848%" height="15" fill="rgb(222,74,54)"/><text x="90.5816%" y="494.50">index_..</text></g><g><title>operator() (IndexKernel.cpp.AVX2.cpp:101) (1,613 samples, 5.08%)</title><rect x="90.3316%" y="500" width="5.0848%" height="15" fill="rgb(216,99,12)"/><text x="90.5816%" y="510.50">operat..</text></g><g><title>operator() (IndexKernel.cpp.AVX2.cpp:101) (1,613 samples, 5.08%)</title><rect x="90.3316%" y="516" width="5.0848%" height="15" fill="rgb(226,22,26)"/><text x="90.5816%" y="526.50">operat..</text></g><g><title>cpu_index_kernel&lt;unsigned char, at::native::(anonymous namespace)::index_kernel(at::TensorIterator&amp;, c10::IntArrayRef, c10::IntArrayRef)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(char*, char*, int64_t)&gt; &gt; (IndexKernel.cpp.AVX2.cpp:98) (797 samples, 2.51%)</title><rect x="92.9040%" y="532" width="2.5125%" height="15" fill="rgb(217,163,10)"/><text x="93.1540%" y="542.50">cp..</text></g><g><title>at::TensorIteratorBase::for_each (TensorIterator.cpp:681) (797 samples, 2.51%)</title><rect x="92.9040%" y="548" width="2.5125%" height="15" fill="rgb(213,25,53)"/><text x="93.1540%" y="558.50">at..</text></g><g><title>at::TensorIteratorBase::for_each (TensorIterator.cpp:690) (794 samples, 2.50%)</title><rect x="92.9134%" y="564" width="2.5030%" height="15" fill="rgb(252,105,26)"/><text x="93.1634%" y="574.50">at..</text></g><g><title>parallel_for&lt;at::TensorIteratorBase::for_each(at::TensorIteratorBase::loop2d_t, int64_t)::&lt;lambda(int64_t, int64_t)&gt; &gt; (ParallelOpenMP.h:55) (793 samples, 2.50%)</title><rect x="92.9166%" y="580" width="2.4998%" height="15" fill="rgb(220,39,43)"/><text x="93.1666%" y="590.50">pa..</text></g><g><title>__kmp_api_GOMP_parallel_40_alias (libomp.so) (793 samples, 2.50%)</title><rect x="92.9166%" y="596" width="2.4998%" height="15" fill="rgb(229,68,48)"/><text x="93.1666%" y="606.50">__..</text></g><g><title>at::parallel_for&lt;at::TensorIteratorBase::for_each(c10::function_ref&lt;void (char**, long const*, long, long)&gt;, long)::{lambda(long, long)#1}&gt; (ParallelOpenMP.h:47) (618 samples, 1.95%)</title><rect x="93.4683%" y="612" width="1.9482%" height="15" fill="rgb(252,8,32)"/><text x="93.7183%" y="622.50">a..</text></g><g><title>operator() (TensorIterator.cpp:692) (618 samples, 1.95%)</title><rect x="93.4683%" y="628" width="1.9482%" height="15" fill="rgb(223,20,43)"/><text x="93.7183%" y="638.50">o..</text></g><g><title>at::TensorIteratorBase::serial_for_each (TensorIterator.cpp:729) (617 samples, 1.95%)</title><rect x="93.4714%" y="644" width="1.9450%" height="15" fill="rgb(229,81,49)"/><text x="93.7214%" y="654.50">a..</text></g><g><title>c10::function_ref&lt;void (char**, long const*, long, long)&gt;::operator() (FunctionRef.h:63) (617 samples, 1.95%)</title><rect x="93.4714%" y="660" width="1.9450%" height="15" fill="rgb(236,28,36)"/><text x="93.7214%" y="670.50">c..</text></g><g><title>callback_fn&lt;at::TensorIteratorBase::for_each(at::TensorIteratorBase::loop_t, int64_t)::&lt;lambda(char**, const int64_t*, int64_t, int64_t)&gt; &gt; (FunctionRef.h:43) (617 samples, 1.95%)</title><rect x="93.4714%" y="676" width="1.9450%" height="15" fill="rgb(249,185,26)"/><text x="93.7214%" y="686.50">c..</text></g><g><title>operator() (TensorIterator.cpp:680) (617 samples, 1.95%)</title><rect x="93.4714%" y="692" width="1.9450%" height="15" fill="rgb(249,174,33)"/><text x="93.7214%" y="702.50">o..</text></g><g><title>c10::function_ref&lt;void (char**, long const*, long)&gt;::operator() (FunctionRef.h:63) (616 samples, 1.94%)</title><rect x="93.4746%" y="708" width="1.9419%" height="15" fill="rgb(233,201,37)"/><text x="93.7246%" y="718.50">c..</text></g><g><title>callback_fn&lt;at::native::(anonymous namespace)::cpu_index_kernel(at::TensorIterator&amp;, c10::IntArrayRef, c10::IntArrayRef, const func_t&amp;, bool) [with scalar_t = unsigned char (616 samples, 1.94%)</title><rect x="93.4746%" y="724" width="1.9419%" height="15" fill="rgb(221,78,26)"/><text x="93.7246%" y="734.50">c..</text></g><g><title> func_t = at::native::(anonymous namespace)::index_kernel(at::TensorIterator&amp;, c10::IntArrayRef, c10::IntArrayRef)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda(char*, char*, int64_t)&gt;]::&lt;lambda(char**, const int64_t*, int64_t)&gt; &gt; (FunctionRef.h:43) (616 samples, 1.94%)</title><rect x="93.4746%" y="740" width="1.9419%" height="15" fill="rgb(250,127,30)"/><text x="93.7246%" y="750.50"> ..</text></g><g><title>index_Tensor (VariableType_1.cpp:4634) (1,642 samples, 5.18%)</title><rect x="90.2434%" y="276" width="5.1762%" height="15" fill="rgb(230,49,44)"/><text x="90.4934%" y="286.50">index_..</text></g><g><title>operator() (VariableType_1.cpp:4632) (1,642 samples, 5.18%)</title><rect x="90.2434%" y="292" width="5.1762%" height="15" fill="rgb(229,67,23)"/><text x="90.4934%" y="302.50">operat..</text></g><g><title>at::index (Functions.cpp:4049) (1,642 samples, 5.18%)</title><rect x="90.2434%" y="308" width="5.1762%" height="15" fill="rgb(249,83,47)"/><text x="90.4934%" y="318.50">at::in..</text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor(at::Tensor const&amp;, c10::List&lt;c10::optional&lt;at::Tensor&gt; &gt; const&amp;)&gt;::call (Dispatcher.h:346) (1,642 samples, 5.18%)</title><rect x="90.2434%" y="324" width="5.1762%" height="15" fill="rgb(215,43,3)"/><text x="90.4934%" y="334.50">c10::T..</text></g><g><title>c10::Dispatcher::call&lt;at::Tensor, at::Tensor const&amp;, c10::List&lt;c10::optional&lt;at::Tensor&gt; &gt; const&amp;&gt; (Dispatcher.h:417) (1,641 samples, 5.17%)</title><rect x="90.2465%" y="340" width="5.1731%" height="15" fill="rgb(238,154,13)"/><text x="90.4965%" y="350.50">c10::D..</text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor, at::Tensor const&amp;, c10::List&lt;c10::optional&lt;at::Tensor&gt; &gt; const&amp;&gt; (Dispatcher.h:405) (1,641 samples, 5.17%)</title><rect x="90.2465%" y="356" width="5.1731%" height="15" fill="rgb(219,56,2)"/><text x="90.4965%" y="366.50">c10::D..</text></g><g><title>c10::KernelFunction::call&lt;at::Tensor, at::Tensor const&amp;, c10::List&lt;c10::optional&lt;at::Tensor&gt; &gt; const&amp;&gt; (KernelFunction_impl.h:55) (1,641 samples, 5.17%)</title><rect x="90.2465%" y="372" width="5.1731%" height="15" fill="rgb(233,0,4)"/><text x="90.4965%" y="382.50">c10::K..</text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor, at::Tensor const&amp;, c10::List&lt;c10::optional&lt;at::Tensor&gt; &gt; const&amp;&gt; (KernelFunction_impl.h:46) (1,641 samples, 5.17%)</title><rect x="90.2465%" y="388" width="5.1731%" height="15" fill="rgb(235,30,7)"/><text x="90.4965%" y="398.50">c10::c..</text></g><g><title>call (make_boxed_from_unboxed_functor.h:406) (1,641 samples, 5.17%)</title><rect x="90.2465%" y="404" width="5.1731%" height="15" fill="rgb(250,79,13)"/><text x="90.4965%" y="414.50">call (..</text></g><g><title>operator() (WrapFunctionIntoFunctor.h:14) (1,641 samples, 5.17%)</title><rect x="90.2465%" y="420" width="5.1731%" height="15" fill="rgb(211,146,34)"/><text x="90.4965%" y="430.50">operat..</text></g><g><title>index_Tensor (RegisterCPU.cpp:944) (1,641 samples, 5.17%)</title><rect x="90.2465%" y="436" width="5.1731%" height="15" fill="rgb(228,22,38)"/><text x="90.4965%" y="446.50">index_..</text></g><g><title>at::native::index (TensorAdvancedIndexing.cpp:290) (1,615 samples, 5.09%)</title><rect x="90.3285%" y="452" width="5.0911%" height="15" fill="rgb(235,168,5)"/><text x="90.5785%" y="462.50">at::na..</text></g><g><title>at::native::DispatchStub&lt;void (*)(at::TensorIterator&amp;, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt;), at::native::index_stub&gt;::operator()&lt;at::TensorIterator&amp;, c10::SmallVector&lt;long, (unsigned int)5&gt;&amp;, c10::SmallVector&lt;long, (unsigned int)5&gt;&amp;&gt; (DispatchStub.h:82) (1,614 samples, 5.09%)</title><rect x="90.3316%" y="468" width="5.0880%" height="15" fill="rgb(221,155,16)"/><text x="90.5816%" y="478.50">at::na..</text></g><g><title>at::Tensor::index (TensorMethods.cpp:1519) (1,648 samples, 5.20%)</title><rect x="90.2276%" y="148" width="5.1951%" height="15" fill="rgb(215,215,53)"/><text x="90.4776%" y="158.50">at::Te..</text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor(at::Tensor const&amp;, c10::List&lt;c10::optional&lt;at::Tensor&gt; &gt; const&amp;)&gt;::call (Dispatcher.h:346) (1,648 samples, 5.20%)</title><rect x="90.2276%" y="164" width="5.1951%" height="15" fill="rgb(223,4,10)"/><text x="90.4776%" y="174.50">c10::T..</text></g><g><title>c10::Dispatcher::call&lt;at::Tensor, at::Tensor const&amp;, c10::List&lt;c10::optional&lt;at::Tensor&gt; &gt; const&amp;&gt; (Dispatcher.h:417) (1,648 samples, 5.20%)</title><rect x="90.2276%" y="180" width="5.1951%" height="15" fill="rgb(234,103,6)"/><text x="90.4776%" y="190.50">c10::D..</text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor, at::Tensor const&amp;, c10::List&lt;c10::optional&lt;at::Tensor&gt; &gt; const&amp;&gt; (Dispatcher.h:405) (1,647 samples, 5.19%)</title><rect x="90.2308%" y="196" width="5.1920%" height="15" fill="rgb(227,97,0)"/><text x="90.4808%" y="206.50">c10::D..</text></g><g><title>c10::KernelFunction::call&lt;at::Tensor, at::Tensor const&amp;, c10::List&lt;c10::optional&lt;at::Tensor&gt; &gt; const&amp;&gt; (KernelFunction_impl.h:55) (1,647 samples, 5.19%)</title><rect x="90.2308%" y="212" width="5.1920%" height="15" fill="rgb(234,150,53)"/><text x="90.4808%" y="222.50">c10::K..</text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor, at::Tensor const&amp;, c10::List&lt;c10::optional&lt;at::Tensor&gt; &gt; const&amp;&gt; (KernelFunction_impl.h:46) (1,647 samples, 5.19%)</title><rect x="90.2308%" y="228" width="5.1920%" height="15" fill="rgb(228,201,54)"/><text x="90.4808%" y="238.50">c10::c..</text></g><g><title>call (make_boxed_from_unboxed_functor.h:406) (1,647 samples, 5.19%)</title><rect x="90.2308%" y="244" width="5.1920%" height="15" fill="rgb(222,22,37)"/><text x="90.4808%" y="254.50">call (..</text></g><g><title>operator() (WrapFunctionIntoFunctor.h:14) (1,647 samples, 5.19%)</title><rect x="90.2308%" y="260" width="5.1920%" height="15" fill="rgb(237,53,32)"/><text x="90.4808%" y="270.50">operat..</text></g><g><title>&lt;lambda&gt; (benchmarks.py:87) (6,710 samples, 21.15%)</title><rect x="74.2986%" y="84" width="21.1525%" height="15" fill="rgb(233,25,53)"/><text x="74.5486%" y="94.50">&lt;lambda&gt; (benchmarks.py:87)</text></g><g><title>torch::autograd::THPVariable_getitem (python_variable_indexing.cpp:325) (1,657 samples, 5.22%)</title><rect x="90.2276%" y="100" width="5.2235%" height="15" fill="rgb(210,40,34)"/><text x="90.4776%" y="110.50">torch:..</text></g><g><title>operator() (python_variable_indexing.cpp:327) (1,657 samples, 5.22%)</title><rect x="90.2276%" y="116" width="5.2235%" height="15" fill="rgb(241,220,44)"/><text x="90.4776%" y="126.50">operat..</text></g><g><title>dispatch_index (TensorIndexing.h:455) (1,657 samples, 5.22%)</title><rect x="90.2276%" y="132" width="5.2235%" height="15" fill="rgb(235,28,35)"/><text x="90.4776%" y="142.50">dispat..</text></g><g><title>&lt;module&gt; (benchmarks.py:117) (6,811 samples, 21.47%)</title><rect x="74.2986%" y="68" width="21.4709%" height="15" fill="rgb(210,56,17)"/><text x="74.5486%" y="78.50">&lt;module&gt; (benchmarks.py:117)</text></g><g><title>&lt;module&gt; (torch/__init__.py:190) (1,068 samples, 3.37%)</title><rect x="95.9397%" y="164" width="3.3667%" height="15" fill="rgb(224,130,29)"/><text x="96.1897%" y="174.50">&lt;mo..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (1,068 samples, 3.37%)</title><rect x="95.9397%" y="180" width="3.3667%" height="15" fill="rgb(235,212,8)"/><text x="96.1897%" y="190.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (1,068 samples, 3.37%)</title><rect x="95.9397%" y="196" width="3.3667%" height="15" fill="rgb(223,33,50)"/><text x="96.1897%" y="206.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:666) (1,068 samples, 3.37%)</title><rect x="95.9397%" y="212" width="3.3667%" height="15" fill="rgb(219,149,13)"/><text x="96.1897%" y="222.50">_lo..</text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;:565) (1,068 samples, 3.37%)</title><rect x="95.9397%" y="228" width="3.3667%" height="15" fill="rgb(250,156,29)"/><text x="96.1897%" y="238.50">mod..</text></g><g><title>create_module (&lt;frozen importlib._bootstrap_external&gt;:1108) (1,068 samples, 3.37%)</title><rect x="95.9397%" y="244" width="3.3667%" height="15" fill="rgb(216,193,19)"/><text x="96.1897%" y="254.50">cre..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (1,068 samples, 3.37%)</title><rect x="95.9397%" y="260" width="3.3667%" height="15" fill="rgb(216,135,14)"/><text x="96.1897%" y="270.50">_ca..</text></g><g><title>dlopen (libdl-2.27.so) (1,015 samples, 3.20%)</title><rect x="96.1068%" y="276" width="3.1997%" height="15" fill="rgb(241,47,5)"/><text x="96.3568%" y="286.50">dlo..</text></g><g><title>0x7f2c078fb745 (libdl-2.27.so) (1,015 samples, 3.20%)</title><rect x="96.1068%" y="292" width="3.1997%" height="15" fill="rgb(233,42,35)"/><text x="96.3568%" y="302.50">0x7..</text></g><g><title>_dl_catch_error (libc-2.27.so) (1,015 samples, 3.20%)</title><rect x="96.1068%" y="308" width="3.1997%" height="15" fill="rgb(231,13,6)"/><text x="96.3568%" y="318.50">_dl..</text></g><g><title>_dl_catch_exception (libc-2.27.so) (1,015 samples, 3.20%)</title><rect x="96.1068%" y="324" width="3.1997%" height="15" fill="rgb(207,181,40)"/><text x="96.3568%" y="334.50">_dl..</text></g><g><title>0x7f2c078faf96 (libdl-2.27.so) (1,015 samples, 3.20%)</title><rect x="96.1068%" y="340" width="3.1997%" height="15" fill="rgb(254,173,49)"/><text x="96.3568%" y="350.50">0x7..</text></g><g><title>0x7f2c07d3196a (ld-2.27.so) (1,015 samples, 3.20%)</title><rect x="96.1068%" y="356" width="3.1997%" height="15" fill="rgb(221,1,38)"/><text x="96.3568%" y="366.50">0x7..</text></g><g><title>_dl_catch_exception (libc-2.27.so) (1,015 samples, 3.20%)</title><rect x="96.1068%" y="372" width="3.1997%" height="15" fill="rgb(206,124,46)"/><text x="96.3568%" y="382.50">_dl..</text></g><g><title>0x7f2c07d3239f (ld-2.27.so) (992 samples, 3.13%)</title><rect x="96.1793%" y="388" width="3.1272%" height="15" fill="rgb(249,21,11)"/><text x="96.4293%" y="398.50">0x7..</text></g><g><title>0x7f2c07d2d8d3 (ld-2.27.so) (992 samples, 3.13%)</title><rect x="96.1793%" y="404" width="3.1272%" height="15" fill="rgb(222,201,40)"/><text x="96.4293%" y="414.50">0x7..</text></g><g><title>&lt;module&gt; (benchmarks.py:9) (1,255 samples, 3.96%)</title><rect x="95.9334%" y="68" width="3.9562%" height="15" fill="rgb(235,61,29)"/><text x="96.1834%" y="78.50">&lt;mod..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (1,255 samples, 3.96%)</title><rect x="95.9334%" y="84" width="3.9562%" height="15" fill="rgb(219,207,3)"/><text x="96.1834%" y="94.50">_fin..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (1,255 samples, 3.96%)</title><rect x="95.9334%" y="100" width="3.9562%" height="15" fill="rgb(222,56,46)"/><text x="96.1834%" y="110.50">_fin..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (1,255 samples, 3.96%)</title><rect x="95.9334%" y="116" width="3.9562%" height="15" fill="rgb(239,76,54)"/><text x="96.1834%" y="126.50">_loa..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:790) (1,255 samples, 3.96%)</title><rect x="95.9334%" y="132" width="3.9562%" height="15" fill="rgb(231,124,27)"/><text x="96.1834%" y="142.50">exec..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (1,255 samples, 3.96%)</title><rect x="95.9334%" y="148" width="3.9562%" height="15" fill="rgb(249,195,6)"/><text x="96.1834%" y="158.50">_cal..</text></g><g><title>all (31,722 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(237,174,47)"/><text x="0.2500%" y="62.50"></text></g></svg></svg>